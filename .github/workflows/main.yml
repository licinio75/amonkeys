name: Build, Test and Deploy to S3

on:
  push:
    branches:
      - main # Triggered only on push to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the source code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Set up Java 17
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto' # Amazon Corretto

      # 3. Run the tests
      - name: Create minimal settings.xml
        run: echo "<settings></settings>" > ~/.m2/settings.xml

      - name: Create empty settings-security.xml
        run: echo "<settingsSecurity><master></master></settingsSecurity>" > ~/.m2/settings-security.xml

      - name: Run tests
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        run: mvn clean test

      # 4. If tests pass, build the JAR
      - name: Build JAR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        run: mvn clean install -Dsettings.security=/dev/null

      # 5. Upload the JAR to S3
      - name: Upload JAR to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp target/amonkeys-0.0.1-SNAPSHOT.jar s3://amonkeys-photos/

      # 6. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Deploy to EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/amonkeys.pem
          chmod 600 ~/.ssh/amonkeys.pem

          # Verify the public IP of the EC2 instance
          EC2_PUBLIC_IP=$(aws ec2 describe-instances --region eu-north-1 --query "Reservations[0].Instances[0].PublicIpAddress" --output text)

          # Establish the SSH connection and verify if the JAR file was copied correctly
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/amonkeys.pem ec2-user@${EC2_PUBLIC_IP} << 'EOF'
            cd /home/ec2-user

            # Copy the JAR file from S3 to the EC2 instance
            aws s3 cp s3://amonkeys-photos/amonkeys-0.0.1-SNAPSHOT.jar /home/ec2-user/amonkeys-0.0.1-SNAPSHOT.jar

            # Verify if the JAR file is present
            if [ -f /home/ec2-user/amonkeys-0.0.1-SNAPSHOT.jar ]; then
              echo "File found, proceeding with execution."
              java -jar /home/ec2-user/amonkeys-0.0.1-SNAPSHOT.jar &
            else
              echo "Error: File not found!"
              exit 1
            fi
          EOF


